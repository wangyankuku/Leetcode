
/**
* Given a sorted array of integers, find the starting and ending position of a given target value.
* Your algorithm's runtime complexity must be in the order of O(log n).
* If the target is not found in the array, return [-1, -1].
* For example,
* Given [5, 7, 7, 8, 8, 10] and target value 8,
* return [3, 4]. 
* @author Yan Wang
*/


public class Solution {
    public int[] searchRange(int[] A, int target) {
        
        int[] res = new int[2];
        
        if (A == null || A.length == 0) {
            return res;
        }
        
        int len = A.length;
        
        int start = -1;
        int end = -1;
        
        // for start
        int i = 0;
        int j = len - 1;
        int m = 0;
        
        while (i <= j) {
            m = i + (j - i) / 2;
            
            if (A[m] == target) {
                if (m == 0 || A[m - 1] != A[m]) {
                    start = m;
                    break;
                }
                
                j = m - 1;
            }
            else if (A[m] < target) {
                i = m + 1;
            }
            else {
                j = m - 1;
            }
        }
        
        // for end
        i = 0;
        j = len - 1;
        m = 0;
        
        while (i <= j) {
            m = i + (j - i) / 2;
            
            if (A[m] == target) {
                if (m == len - 1 || A[m] != A[m + 1]) {
                    end = m;
                    break;
                }
                
                i = m + 1;
            }
            else if (A[m] < target) {
                i = m + 1;
            }
            else {
                j = m - 1;
            }
        }
        
        res[0] = start;
        res[1] = end;
        
        return res;
        
    }
}
